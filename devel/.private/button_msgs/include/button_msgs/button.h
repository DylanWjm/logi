// Generated by gencpp from file button_msgs/button.msg
// DO NOT EDIT!


#ifndef BUTTON_MSGS_MESSAGE_BUTTON_H
#define BUTTON_MSGS_MESSAGE_BUTTON_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace button_msgs
{
template <class ContainerAllocator>
struct button_
{
  typedef button_<ContainerAllocator> Type;

  button_()
    : rev(0)
    , rev1(0)
    , rev2(0)
    , rev3(0)  {
    }
  button_(const ContainerAllocator& _alloc)
    : rev(0)
    , rev1(0)
    , rev2(0)
    , rev3(0)  {
  (void)_alloc;
    }



   typedef uint8_t _rev_type;
  _rev_type rev;

   typedef uint8_t _rev1_type;
  _rev1_type rev1;

   typedef uint8_t _rev2_type;
  _rev2_type rev2;

   typedef uint8_t _rev3_type;
  _rev3_type rev3;





  typedef boost::shared_ptr< ::button_msgs::button_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::button_msgs::button_<ContainerAllocator> const> ConstPtr;

}; // struct button_

typedef ::button_msgs::button_<std::allocator<void> > button;

typedef boost::shared_ptr< ::button_msgs::button > buttonPtr;
typedef boost::shared_ptr< ::button_msgs::button const> buttonConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::button_msgs::button_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::button_msgs::button_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace button_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'button_msgs': ['/home/dylan/catkin__ws/src/button_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::button_msgs::button_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::button_msgs::button_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::button_msgs::button_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::button_msgs::button_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::button_msgs::button_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::button_msgs::button_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::button_msgs::button_<ContainerAllocator> >
{
  static const char* value()
  {
    return "795f3e8875dcd732f3ceab1c4c1df2c6";
  }

  static const char* value(const ::button_msgs::button_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x795f3e8875dcd732ULL;
  static const uint64_t static_value2 = 0xf3ceab1c4c1df2c6ULL;
};

template<class ContainerAllocator>
struct DataType< ::button_msgs::button_<ContainerAllocator> >
{
  static const char* value()
  {
    return "button_msgs/button";
  }

  static const char* value(const ::button_msgs::button_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::button_msgs::button_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 rev\n\
uint8 rev1\n\
uint8 rev2\n\
uint8 rev3\n\
";
  }

  static const char* value(const ::button_msgs::button_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::button_msgs::button_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.rev);
      stream.next(m.rev1);
      stream.next(m.rev2);
      stream.next(m.rev3);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct button_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::button_msgs::button_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::button_msgs::button_<ContainerAllocator>& v)
  {
    s << indent << "rev: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.rev);
    s << indent << "rev1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.rev1);
    s << indent << "rev2: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.rev2);
    s << indent << "rev3: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.rev3);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BUTTON_MSGS_MESSAGE_BUTTON_H
